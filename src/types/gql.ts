/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
  '\n  fragment FIADocs on fia_documents {\n    title\n    url\n    publish_time\n  }\n': typeof types.FiaDocsFragmentDoc;
  '\n  fragment EventSessionCards on schedule {\n    session1\n    session1_date_utc\n    session2\n    session2_date_utc\n    session3\n    session3_date_utc\n    session4\n    session4_date_utc\n    session5\n    session5_date_utc\n  }\n': typeof types.EventSessionCardsFragmentDoc;
  '\n  fragment Event_ScheduleFragment on schedule {\n    event_name\n    round_number\n    event_date\n    event_format\n    year\n    location\n    country\n    session1\n    session1_date\n    session2\n    session2_date\n    session3\n    session3_date\n    session4\n    session4_date\n    session5\n    session5_date\n  }\n': typeof types.Event_ScheduleFragmentFragmentDoc;
  '\n  query GetSeasonEvents($year: Int!) @cached {\n    schedule(where: { year: { _eq: $year } }) {\n      event_name\n      event_date\n      round_number\n      location\n      country\n      ...Event_ScheduleFragment\n    }\n    circuits(where: { year: { _eq: $year } }) {\n      location\n      country\n      ...CircuitDetails\n    }\n  }\n': typeof types.GetSeasonEventsDocument;
  '\n  fragment MapScheduleLocation on schedule {\n    round_number\n    event_name\n    event_date\n    location\n    longitude\n    latitude\n  }\n': typeof types.MapScheduleLocationFragmentDoc;
  '\n  fragment ScheduleSessions on schedule {\n    year\n    event_name\n    session1\n    session2\n    session3\n    session4\n    session5\n    session1_date_utc\n    session2_date_utc\n    session3_date_utc\n    session4_date_utc\n    session5_date_utc\n  }\n': typeof types.ScheduleSessionsFragmentDoc;
  '\n  fragment MapScheduleFragment on schedule {\n    event_name\n    round_number\n    event_date\n    year\n  }\n': typeof types.MapScheduleFragmentFragmentDoc;
  '\n  fragment TopThreeRaceResults on events {\n    topThreeRace: sessions(\n      where: { event: { year: { _eq: $year } }, name: { _eq: Race } }\n    ) {\n      driver_sessions(\n        limit: 3\n        order_by: { results_aggregate: { max: { finishing_position: asc } } }\n      ) {\n        results {\n          finishing_position\n        }\n        driver {\n          full_name\n        }\n        constructorByConstructorId {\n          name\n          color\n        }\n      }\n    }\n  }\n': typeof types.TopThreeRaceResultsFragmentDoc;
  '\n  query GetMapSchedule($year: Int!) @cached {\n    schedule(where: { year: { _eq: $year } }, order_by: { round_number: asc }) {\n      event_name\n      ...MapScheduleFragment\n      ...MapScheduleLocation\n      ...ScheduleEventDetails\n      ...ScheduleSessions\n    }\n    events(where: { year: { _eq: $year } }) {\n      name\n      ...RaceResults\n      ...TopThreeRaceResults\n    }\n  }\n': typeof types.GetMapScheduleDocument;
  '\n  fragment CircuitDetails on circuits {\n    circuit_details\n  }\n': typeof types.CircuitDetailsFragmentDoc;
  '\n  fragment ScheduleEventDetails on schedule {\n    year\n    event_name\n    event_date\n    round_number\n    location\n    country\n    event_format\n  }\n': typeof types.ScheduleEventDetailsFragmentDoc;
  '\n      query GetSeasonEventNames($year: Int!, $event: String!) @cached {\n        schedule(\n          where: {\n            year: { _eq: $year }\n            _or: [\n              { event_name: { _regex: $event } }\n              { country: { _regex: $event } }\n              { location: { _regex: $event } }\n            ]\n          }\n        ) {\n          event_name\n        }\n      }\n    ': typeof types.GetSeasonEventNamesDocument;
  '\n  query GetNavEvents($year: Int!) @cached {\n    schedule(order_by: { round_number: asc }, where: { year: { _eq: $year } }) {\n      round_number\n      event_name\n      event_format\n    }\n  }\n': typeof types.GetNavEventsDocument;
  '\n  query GetNavSessions($year: Int!, $event: String!) @cached {\n    schedule(\n      distinct_on: event_name\n      where: { year: { _eq: $year }, event_name: { _eq: $event } }\n      limit: 1\n    ) {\n      session1\n      session2\n      session3\n      session4\n      session5\n    }\n  }\n': typeof types.GetNavSessionsDocument;
  '\n  query GetNextEvent($today: String!) {\n    schedule(\n      where: { event_date: { _gte: $today } }\n      order_by: { event_date: asc }\n      limit: 1\n    ) {\n      year\n      event_name\n      round_number\n      location\n      country\n      event_format\n      session1_date_utc\n      session2_date_utc\n      session3_date_utc\n      session4_date_utc\n      session5_date_utc\n    }\n  }\n': typeof types.GetNextEventDocument;
  '\n  query GetNextEventCircuit(\n    $location: String!\n    $country: String!\n    $year: Int!\n  ) {\n    circuits(\n      where: {\n        _and: {\n          location: { _eq: $location }\n          country: { _eq: $country }\n          year: { _eq: $year }\n        }\n      }\n      limit: 1\n    ) {\n      ...CircuitDetails\n    }\n  }\n': typeof types.GetNextEventCircuitDocument;
  '\n  fragment RaceResults on events {\n    name\n    raceSession: sessions(\n      where: { event: { year: { _eq: $year } }, name: { _eq: Race } }\n    ) {\n      driver_sessions(\n        limit: 30\n        order_by: { results_aggregate: { max: { finishing_position: asc } } }\n      ) {\n        results {\n          finishing_position\n        }\n        driver {\n          full_name\n        }\n        constructorByConstructorId {\n          name\n          color\n        }\n      }\n    }\n  }\n': typeof types.RaceResultsFragmentDoc;
  '\n  query GetConstructor($_id: String!) @cached {\n    constructors(where: { ergast_id: { _eq: $_id } }) {\n      name\n      color\n      year\n      driver_sessions(\n        order_by: { session: { event: { year: asc } } }\n        where: { session: { total_laps: { _is_null: false } } }\n      ) {\n        driver {\n          full_name\n          number\n          headshot_url\n          country_code\n        }\n        session {\n          name\n          event {\n            round_number\n            name\n            year\n          }\n        }\n        results {\n          points\n          classified_position\n          grid_position\n        }\n      }\n    }\n  }\n': typeof types.GetConstructorDocument;
  '\n  query GetEventSchedule($year: Int!, $event: String!) @cached {\n    dropdown_events: schedule(\n      where: { event_name: { _neq: $event }, year: { _eq: $year } }\n    ) {\n      event_name\n      round_number\n      location\n    }\n    schedule(\n      where: { year: { _eq: $year }, event_name: { _eq: $event } }\n      limit: 1\n    ) {\n      year\n      round_number\n      event_date\n      official_event_name\n      event_name\n      event_format\n      location\n      country\n      session1\n      session1_date_utc\n      session2\n      session2_date_utc\n      session3\n      session3_date_utc\n      session4\n      session4_date_utc\n      session5\n      session5_date_utc\n    }\n  }\n': typeof types.GetEventScheduleDocument;
  '\n  query GetEventDetails($year: Int!, $event: String!) @cached {\n    events(where: { name: { _eq: $event }, year: { _eq: $year } }, limit: 1) {\n      competition: sessions(\n        where: { name: { _in: [Sprint, Race] } }\n        limit: 2\n      ) {\n        scheduled_start_time_utc\n        name\n        driver_sessions {\n          driver {\n            abbreviation\n            full_name\n            number\n            headshot_url\n          }\n          constructorByConstructorId {\n            color\n          }\n          results {\n            finishing_position\n            classified_position\n            grid_position\n            total_race_time\n          }\n          fastest_lap: laps(limit: 1, order_by: { lap_time: asc }) {\n            lap_time\n            lap_number\n          }\n        }\n      }\n      qualifying: sessions(\n        where: {\n          name: { _in: [Sprint_Shootout, Sprint_Qualifying, Qualifying] }\n        }\n        limit: 2\n      ) {\n        scheduled_start_time_utc\n        name\n        driver_sessions {\n          driver {\n            abbreviation\n            full_name\n            number\n            headshot_url\n          }\n          constructorByConstructorId {\n            color\n          }\n          results {\n            finishing_position\n            q1_time\n            q2_time\n            q3_time\n          }\n        }\n      }\n      practices: sessions(\n        limit: 3\n        where: { name: { _in: [Practice_1, Practice_2, Practice_3] } }\n      ) {\n        scheduled_start_time_utc\n        name\n        driver_sessions {\n          driver {\n            abbreviation\n            full_name\n            number\n            headshot_url\n          }\n          constructorByConstructorId {\n            color\n          }\n          fastest_lap: laps(limit: 1, order_by: { lap_time: asc }) {\n            lap_time\n            lap_number\n          }\n        }\n      }\n    }\n\n    schedule(\n      where: { _and: { event_name: { _eq: $event }, year: { _eq: $year } } }\n      order_by: { round_number: asc }\n    ) {\n      ...EventSessionCards\n      ...ScheduleEventDetails\n    }\n\n    fia_documents(\n      where: { _and: { event_name: { _eq: $event }, year: { _eq: $year } } }\n      order_by: { publish_time: desc }\n    ) {\n      ...FIADocs\n    }\n  }\n': typeof types.GetEventDetailsDocument;
  '\n  query GetTopStandings($season: Int!, $limit: Int = 3) @cached {\n    drivers(\n      where: { driver_standings: { season: { _eq: $season } } }\n      order_by: { driver_standings_aggregate: { max: { points: desc } } }\n      limit: $limit\n    ) {\n      abbreviation\n      full_name\n      latest_constructor: driver_sessions(\n        limit: 1\n        order_by: { session: { date: desc } }\n      ) {\n        constructor: constructorByConstructorId {\n          name\n          color\n        }\n      }\n      driver_standings(\n        where: { season: { _eq: $season } }\n        order_by: { round: desc }\n        limit: 1\n      ) {\n        round\n        points\n        position\n      }\n    }\n    constructors(\n      where: { constructor_standings: { season: { _eq: $season } } }\n      order_by: { constructor_standings_aggregate: { max: { points: desc } } }\n      limit: $limit\n    ) {\n      name\n      color\n      constructor_standings(\n        where: { season: { _eq: $season } }\n        order_by: { round: desc }\n        limit: 1\n      ) {\n        round\n        points\n        position\n      }\n    }\n  }\n': typeof types.GetTopStandingsDocument;
  '\n  query GetStandings($season: Int!) @cached {\n    events(where: { year: { _eq: $season } }) {\n      round_number\n      name\n    }\n    drivers(\n      where: { driver_standings: { season: { _eq: $season } } }\n      order_by: { driver_standings_aggregate: { max: { points: desc } } }\n    ) {\n      abbreviation\n      full_name\n      latest_constructor: driver_sessions(\n        limit: 1\n        order_by: { session: { date: desc } }\n      ) {\n        constructor: constructorByConstructorId {\n          name\n          color\n        }\n      }\n      driver_standings(\n        where: { season: { _eq: $season } }\n        order_by: { round: asc }\n      ) {\n        round\n        points\n        position\n      }\n    }\n    constructors(\n      where: { constructor_standings: { season: { _eq: $season } } }\n      order_by: { constructor_standings_aggregate: { max: { points: desc } } }\n    ) {\n      name\n      color\n      lastRoundPoints: constructor_standings(\n        where: { season: { _eq: $season } }\n        order_by: { round: desc }\n        limit: 1\n      ) {\n        points\n      }\n      constructor_standings(\n        where: { season: { _eq: $season } }\n        order_by: { round: desc }\n      ) {\n        round\n        points\n        position\n      }\n    }\n  }\n': typeof types.GetStandingsDocument;
  '\n  query Session(\n    $year: Int!\n    $event: String!\n    $session: session_name_choices_enum!\n  ) @cached {\n    sessions(\n      limit: 1\n      where: {\n        event: { year: { _eq: $year }, name: { _eq: $event } }\n        name: { _eq: $session }\n      }\n    ) {\n      name\n      total_laps\n      scheduled_start_time_utc\n      event {\n        name\n      }\n    }\n  }\n': typeof types.SessionDocument;
  '\n  query SessionResults(\n    $year: Int!\n    $event: String!\n    $session: session_name_choices_enum!\n  ) @cached {\n    sessions(\n      limit: 1\n      where: {\n        event: { year: { _eq: $year }, name: { _eq: $event } }\n        name: { _eq: $session }\n      }\n    ) {\n      name\n      event {\n        name\n      }\n      driver_sessions {\n        constructorByConstructorId {\n          name\n          color\n        }\n        driver {\n          abbreviation\n          full_name\n          number\n          headshot_url\n        }\n        results(\n          where: {\n            _or: [\n              { grid_position: { _is_null: false } }\n              { finishing_position: { _is_null: false } }\n            ]\n          }\n        ) {\n          grid_position\n          finishing_position\n          points\n          status\n          classified_position\n          total_race_time\n        }\n        fastest_lap: laps(order_by: { lap_time: asc }, limit: 1) {\n          lap_number\n          stint\n          lap_time\n        }\n      }\n    }\n  }\n': typeof types.SessionResultsDocument;
  '\n  query GetSessionFastestTimes(\n    $year: Int!\n    $event: String!\n    $session: session_name_choices_enum!\n  ) @cached {\n    sessions(\n      limit: 1\n      where: {\n        event: { year: { _eq: $year }, name: { _eq: $event } }\n        name: { _eq: $session }\n      }\n    ) {\n      name\n      event {\n        name\n      }\n      driver_sessions {\n        constructorByConstructorId {\n          name\n          color\n        }\n        driver {\n          abbreviation\n        }\n        fastest_lap: laps(order_by: { lap_time: asc }, limit: 1) {\n          lap_number\n          stint\n          lap_time\n          sector1\n          sector2\n          sector3\n        }\n        fastest_sector1: laps(order_by: { sector1: asc }, limit: 1) {\n          lap_number\n          stint\n          sector1\n        }\n        fastest_sector2: laps(order_by: { sector2: asc }, limit: 1) {\n          lap_number\n          stint\n          sector2\n        }\n        fastest_sector3: laps(order_by: { sector3: asc }, limit: 1) {\n          lap_number\n          stint\n          sector3\n        }\n      }\n    }\n  }\n': typeof types.GetSessionFastestTimesDocument;
  '\n  query GetSessionStints(\n    $year: Int!\n    $event: String!\n    $session: session_name_choices_enum!\n  ) @cached {\n    sessions(\n      limit: 1\n      where: {\n        event: { year: { _eq: $year }, name: { _eq: $event } }\n        name: { _eq: $session }\n      }\n    ) {\n      driver_sessions {\n        driver {\n          abbreviation\n          full_name\n        }\n        laps {\n          stint\n          tyre_compound {\n            value\n          }\n          tyre_life\n          fresh_tyre\n        }\n      }\n    }\n  }\n': typeof types.GetSessionStintsDocument;
  '\n  query GetSessionLapTimes(\n    $year: Int!\n    $event: String!\n    $session: session_name_choices_enum!\n  ) @cached {\n    sessions(\n      limit: 1\n      where: {\n        event: { year: { _eq: $year }, name: { _eq: $event } }\n        name: { _eq: $session }\n      }\n    ) {\n      driver_sessions {\n        constructorByConstructorId {\n          name\n          color\n        }\n        driver {\n          abbreviation\n          full_name\n          number\n        }\n        laps(order_by: { lap_number: asc }) {\n          lap_number\n          lap_time\n          compound\n          session_time\n        }\n      }\n    }\n  }\n': typeof types.GetSessionLapTimesDocument;
};
const documents: Documents = {
  '\n  fragment FIADocs on fia_documents {\n    title\n    url\n    publish_time\n  }\n':
    types.FiaDocsFragmentDoc,
  '\n  fragment EventSessionCards on schedule {\n    session1\n    session1_date_utc\n    session2\n    session2_date_utc\n    session3\n    session3_date_utc\n    session4\n    session4_date_utc\n    session5\n    session5_date_utc\n  }\n':
    types.EventSessionCardsFragmentDoc,
  '\n  fragment Event_ScheduleFragment on schedule {\n    event_name\n    round_number\n    event_date\n    event_format\n    year\n    location\n    country\n    session1\n    session1_date\n    session2\n    session2_date\n    session3\n    session3_date\n    session4\n    session4_date\n    session5\n    session5_date\n  }\n':
    types.Event_ScheduleFragmentFragmentDoc,
  '\n  query GetSeasonEvents($year: Int!) @cached {\n    schedule(where: { year: { _eq: $year } }) {\n      event_name\n      event_date\n      round_number\n      location\n      country\n      ...Event_ScheduleFragment\n    }\n    circuits(where: { year: { _eq: $year } }) {\n      location\n      country\n      ...CircuitDetails\n    }\n  }\n':
    types.GetSeasonEventsDocument,
  '\n  fragment MapScheduleLocation on schedule {\n    round_number\n    event_name\n    event_date\n    location\n    longitude\n    latitude\n  }\n':
    types.MapScheduleLocationFragmentDoc,
  '\n  fragment ScheduleSessions on schedule {\n    year\n    event_name\n    session1\n    session2\n    session3\n    session4\n    session5\n    session1_date_utc\n    session2_date_utc\n    session3_date_utc\n    session4_date_utc\n    session5_date_utc\n  }\n':
    types.ScheduleSessionsFragmentDoc,
  '\n  fragment MapScheduleFragment on schedule {\n    event_name\n    round_number\n    event_date\n    year\n  }\n':
    types.MapScheduleFragmentFragmentDoc,
  '\n  fragment TopThreeRaceResults on events {\n    topThreeRace: sessions(\n      where: { event: { year: { _eq: $year } }, name: { _eq: Race } }\n    ) {\n      driver_sessions(\n        limit: 3\n        order_by: { results_aggregate: { max: { finishing_position: asc } } }\n      ) {\n        results {\n          finishing_position\n        }\n        driver {\n          full_name\n        }\n        constructorByConstructorId {\n          name\n          color\n        }\n      }\n    }\n  }\n':
    types.TopThreeRaceResultsFragmentDoc,
  '\n  query GetMapSchedule($year: Int!) @cached {\n    schedule(where: { year: { _eq: $year } }, order_by: { round_number: asc }) {\n      event_name\n      ...MapScheduleFragment\n      ...MapScheduleLocation\n      ...ScheduleEventDetails\n      ...ScheduleSessions\n    }\n    events(where: { year: { _eq: $year } }) {\n      name\n      ...RaceResults\n      ...TopThreeRaceResults\n    }\n  }\n':
    types.GetMapScheduleDocument,
  '\n  fragment CircuitDetails on circuits {\n    circuit_details\n  }\n':
    types.CircuitDetailsFragmentDoc,
  '\n  fragment ScheduleEventDetails on schedule {\n    year\n    event_name\n    event_date\n    round_number\n    location\n    country\n    event_format\n  }\n':
    types.ScheduleEventDetailsFragmentDoc,
  '\n      query GetSeasonEventNames($year: Int!, $event: String!) @cached {\n        schedule(\n          where: {\n            year: { _eq: $year }\n            _or: [\n              { event_name: { _regex: $event } }\n              { country: { _regex: $event } }\n              { location: { _regex: $event } }\n            ]\n          }\n        ) {\n          event_name\n        }\n      }\n    ':
    types.GetSeasonEventNamesDocument,
  '\n  query GetNavEvents($year: Int!) @cached {\n    schedule(order_by: { round_number: asc }, where: { year: { _eq: $year } }) {\n      round_number\n      event_name\n      event_format\n    }\n  }\n':
    types.GetNavEventsDocument,
  '\n  query GetNavSessions($year: Int!, $event: String!) @cached {\n    schedule(\n      distinct_on: event_name\n      where: { year: { _eq: $year }, event_name: { _eq: $event } }\n      limit: 1\n    ) {\n      session1\n      session2\n      session3\n      session4\n      session5\n    }\n  }\n':
    types.GetNavSessionsDocument,
  '\n  query GetNextEvent($today: String!) {\n    schedule(\n      where: { event_date: { _gte: $today } }\n      order_by: { event_date: asc }\n      limit: 1\n    ) {\n      year\n      event_name\n      round_number\n      location\n      country\n      event_format\n      session1_date_utc\n      session2_date_utc\n      session3_date_utc\n      session4_date_utc\n      session5_date_utc\n    }\n  }\n':
    types.GetNextEventDocument,
  '\n  query GetNextEventCircuit(\n    $location: String!\n    $country: String!\n    $year: Int!\n  ) {\n    circuits(\n      where: {\n        _and: {\n          location: { _eq: $location }\n          country: { _eq: $country }\n          year: { _eq: $year }\n        }\n      }\n      limit: 1\n    ) {\n      ...CircuitDetails\n    }\n  }\n':
    types.GetNextEventCircuitDocument,
  '\n  fragment RaceResults on events {\n    name\n    raceSession: sessions(\n      where: { event: { year: { _eq: $year } }, name: { _eq: Race } }\n    ) {\n      driver_sessions(\n        limit: 30\n        order_by: { results_aggregate: { max: { finishing_position: asc } } }\n      ) {\n        results {\n          finishing_position\n        }\n        driver {\n          full_name\n        }\n        constructorByConstructorId {\n          name\n          color\n        }\n      }\n    }\n  }\n':
    types.RaceResultsFragmentDoc,
  '\n  query GetConstructor($_id: String!) @cached {\n    constructors(where: { ergast_id: { _eq: $_id } }) {\n      name\n      color\n      year\n      driver_sessions(\n        order_by: { session: { event: { year: asc } } }\n        where: { session: { total_laps: { _is_null: false } } }\n      ) {\n        driver {\n          full_name\n          number\n          headshot_url\n          country_code\n        }\n        session {\n          name\n          event {\n            round_number\n            name\n            year\n          }\n        }\n        results {\n          points\n          classified_position\n          grid_position\n        }\n      }\n    }\n  }\n':
    types.GetConstructorDocument,
  '\n  query GetEventSchedule($year: Int!, $event: String!) @cached {\n    dropdown_events: schedule(\n      where: { event_name: { _neq: $event }, year: { _eq: $year } }\n    ) {\n      event_name\n      round_number\n      location\n    }\n    schedule(\n      where: { year: { _eq: $year }, event_name: { _eq: $event } }\n      limit: 1\n    ) {\n      year\n      round_number\n      event_date\n      official_event_name\n      event_name\n      event_format\n      location\n      country\n      session1\n      session1_date_utc\n      session2\n      session2_date_utc\n      session3\n      session3_date_utc\n      session4\n      session4_date_utc\n      session5\n      session5_date_utc\n    }\n  }\n':
    types.GetEventScheduleDocument,
  '\n  query GetEventDetails($year: Int!, $event: String!) @cached {\n    events(where: { name: { _eq: $event }, year: { _eq: $year } }, limit: 1) {\n      competition: sessions(\n        where: { name: { _in: [Sprint, Race] } }\n        limit: 2\n      ) {\n        scheduled_start_time_utc\n        name\n        driver_sessions {\n          driver {\n            abbreviation\n            full_name\n            number\n            headshot_url\n          }\n          constructorByConstructorId {\n            color\n          }\n          results {\n            finishing_position\n            classified_position\n            grid_position\n            total_race_time\n          }\n          fastest_lap: laps(limit: 1, order_by: { lap_time: asc }) {\n            lap_time\n            lap_number\n          }\n        }\n      }\n      qualifying: sessions(\n        where: {\n          name: { _in: [Sprint_Shootout, Sprint_Qualifying, Qualifying] }\n        }\n        limit: 2\n      ) {\n        scheduled_start_time_utc\n        name\n        driver_sessions {\n          driver {\n            abbreviation\n            full_name\n            number\n            headshot_url\n          }\n          constructorByConstructorId {\n            color\n          }\n          results {\n            finishing_position\n            q1_time\n            q2_time\n            q3_time\n          }\n        }\n      }\n      practices: sessions(\n        limit: 3\n        where: { name: { _in: [Practice_1, Practice_2, Practice_3] } }\n      ) {\n        scheduled_start_time_utc\n        name\n        driver_sessions {\n          driver {\n            abbreviation\n            full_name\n            number\n            headshot_url\n          }\n          constructorByConstructorId {\n            color\n          }\n          fastest_lap: laps(limit: 1, order_by: { lap_time: asc }) {\n            lap_time\n            lap_number\n          }\n        }\n      }\n    }\n\n    schedule(\n      where: { _and: { event_name: { _eq: $event }, year: { _eq: $year } } }\n      order_by: { round_number: asc }\n    ) {\n      ...EventSessionCards\n      ...ScheduleEventDetails\n    }\n\n    fia_documents(\n      where: { _and: { event_name: { _eq: $event }, year: { _eq: $year } } }\n      order_by: { publish_time: desc }\n    ) {\n      ...FIADocs\n    }\n  }\n':
    types.GetEventDetailsDocument,
  '\n  query GetTopStandings($season: Int!, $limit: Int = 3) @cached {\n    drivers(\n      where: { driver_standings: { season: { _eq: $season } } }\n      order_by: { driver_standings_aggregate: { max: { points: desc } } }\n      limit: $limit\n    ) {\n      abbreviation\n      full_name\n      latest_constructor: driver_sessions(\n        limit: 1\n        order_by: { session: { date: desc } }\n      ) {\n        constructor: constructorByConstructorId {\n          name\n          color\n        }\n      }\n      driver_standings(\n        where: { season: { _eq: $season } }\n        order_by: { round: desc }\n        limit: 1\n      ) {\n        round\n        points\n        position\n      }\n    }\n    constructors(\n      where: { constructor_standings: { season: { _eq: $season } } }\n      order_by: { constructor_standings_aggregate: { max: { points: desc } } }\n      limit: $limit\n    ) {\n      name\n      color\n      constructor_standings(\n        where: { season: { _eq: $season } }\n        order_by: { round: desc }\n        limit: 1\n      ) {\n        round\n        points\n        position\n      }\n    }\n  }\n':
    types.GetTopStandingsDocument,
  '\n  query GetStandings($season: Int!) @cached {\n    events(where: { year: { _eq: $season } }) {\n      round_number\n      name\n    }\n    drivers(\n      where: { driver_standings: { season: { _eq: $season } } }\n      order_by: { driver_standings_aggregate: { max: { points: desc } } }\n    ) {\n      abbreviation\n      full_name\n      latest_constructor: driver_sessions(\n        limit: 1\n        order_by: { session: { date: desc } }\n      ) {\n        constructor: constructorByConstructorId {\n          name\n          color\n        }\n      }\n      driver_standings(\n        where: { season: { _eq: $season } }\n        order_by: { round: asc }\n      ) {\n        round\n        points\n        position\n      }\n    }\n    constructors(\n      where: { constructor_standings: { season: { _eq: $season } } }\n      order_by: { constructor_standings_aggregate: { max: { points: desc } } }\n    ) {\n      name\n      color\n      lastRoundPoints: constructor_standings(\n        where: { season: { _eq: $season } }\n        order_by: { round: desc }\n        limit: 1\n      ) {\n        points\n      }\n      constructor_standings(\n        where: { season: { _eq: $season } }\n        order_by: { round: desc }\n      ) {\n        round\n        points\n        position\n      }\n    }\n  }\n':
    types.GetStandingsDocument,
  '\n  query Session(\n    $year: Int!\n    $event: String!\n    $session: session_name_choices_enum!\n  ) @cached {\n    sessions(\n      limit: 1\n      where: {\n        event: { year: { _eq: $year }, name: { _eq: $event } }\n        name: { _eq: $session }\n      }\n    ) {\n      name\n      total_laps\n      scheduled_start_time_utc\n      event {\n        name\n      }\n    }\n  }\n':
    types.SessionDocument,
  '\n  query SessionResults(\n    $year: Int!\n    $event: String!\n    $session: session_name_choices_enum!\n  ) @cached {\n    sessions(\n      limit: 1\n      where: {\n        event: { year: { _eq: $year }, name: { _eq: $event } }\n        name: { _eq: $session }\n      }\n    ) {\n      name\n      event {\n        name\n      }\n      driver_sessions {\n        constructorByConstructorId {\n          name\n          color\n        }\n        driver {\n          abbreviation\n          full_name\n          number\n          headshot_url\n        }\n        results(\n          where: {\n            _or: [\n              { grid_position: { _is_null: false } }\n              { finishing_position: { _is_null: false } }\n            ]\n          }\n        ) {\n          grid_position\n          finishing_position\n          points\n          status\n          classified_position\n          total_race_time\n        }\n        fastest_lap: laps(order_by: { lap_time: asc }, limit: 1) {\n          lap_number\n          stint\n          lap_time\n        }\n      }\n    }\n  }\n':
    types.SessionResultsDocument,
  '\n  query GetSessionFastestTimes(\n    $year: Int!\n    $event: String!\n    $session: session_name_choices_enum!\n  ) @cached {\n    sessions(\n      limit: 1\n      where: {\n        event: { year: { _eq: $year }, name: { _eq: $event } }\n        name: { _eq: $session }\n      }\n    ) {\n      name\n      event {\n        name\n      }\n      driver_sessions {\n        constructorByConstructorId {\n          name\n          color\n        }\n        driver {\n          abbreviation\n        }\n        fastest_lap: laps(order_by: { lap_time: asc }, limit: 1) {\n          lap_number\n          stint\n          lap_time\n          sector1\n          sector2\n          sector3\n        }\n        fastest_sector1: laps(order_by: { sector1: asc }, limit: 1) {\n          lap_number\n          stint\n          sector1\n        }\n        fastest_sector2: laps(order_by: { sector2: asc }, limit: 1) {\n          lap_number\n          stint\n          sector2\n        }\n        fastest_sector3: laps(order_by: { sector3: asc }, limit: 1) {\n          lap_number\n          stint\n          sector3\n        }\n      }\n    }\n  }\n':
    types.GetSessionFastestTimesDocument,
  '\n  query GetSessionStints(\n    $year: Int!\n    $event: String!\n    $session: session_name_choices_enum!\n  ) @cached {\n    sessions(\n      limit: 1\n      where: {\n        event: { year: { _eq: $year }, name: { _eq: $event } }\n        name: { _eq: $session }\n      }\n    ) {\n      driver_sessions {\n        driver {\n          abbreviation\n          full_name\n        }\n        laps {\n          stint\n          tyre_compound {\n            value\n          }\n          tyre_life\n          fresh_tyre\n        }\n      }\n    }\n  }\n':
    types.GetSessionStintsDocument,
  '\n  query GetSessionLapTimes(\n    $year: Int!\n    $event: String!\n    $session: session_name_choices_enum!\n  ) @cached {\n    sessions(\n      limit: 1\n      where: {\n        event: { year: { _eq: $year }, name: { _eq: $event } }\n        name: { _eq: $session }\n      }\n    ) {\n      driver_sessions {\n        constructorByConstructorId {\n          name\n          color\n        }\n        driver {\n          abbreviation\n          full_name\n          number\n        }\n        laps(order_by: { lap_number: asc }) {\n          lap_number\n          lap_time\n          compound\n          session_time\n        }\n      }\n    }\n  }\n':
    types.GetSessionLapTimesDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment FIADocs on fia_documents {\n    title\n    url\n    publish_time\n  }\n',
): (typeof documents)['\n  fragment FIADocs on fia_documents {\n    title\n    url\n    publish_time\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment EventSessionCards on schedule {\n    session1\n    session1_date_utc\n    session2\n    session2_date_utc\n    session3\n    session3_date_utc\n    session4\n    session4_date_utc\n    session5\n    session5_date_utc\n  }\n',
): (typeof documents)['\n  fragment EventSessionCards on schedule {\n    session1\n    session1_date_utc\n    session2\n    session2_date_utc\n    session3\n    session3_date_utc\n    session4\n    session4_date_utc\n    session5\n    session5_date_utc\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment Event_ScheduleFragment on schedule {\n    event_name\n    round_number\n    event_date\n    event_format\n    year\n    location\n    country\n    session1\n    session1_date\n    session2\n    session2_date\n    session3\n    session3_date\n    session4\n    session4_date\n    session5\n    session5_date\n  }\n',
): (typeof documents)['\n  fragment Event_ScheduleFragment on schedule {\n    event_name\n    round_number\n    event_date\n    event_format\n    year\n    location\n    country\n    session1\n    session1_date\n    session2\n    session2_date\n    session3\n    session3_date\n    session4\n    session4_date\n    session5\n    session5_date\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetSeasonEvents($year: Int!) @cached {\n    schedule(where: { year: { _eq: $year } }) {\n      event_name\n      event_date\n      round_number\n      location\n      country\n      ...Event_ScheduleFragment\n    }\n    circuits(where: { year: { _eq: $year } }) {\n      location\n      country\n      ...CircuitDetails\n    }\n  }\n',
): (typeof documents)['\n  query GetSeasonEvents($year: Int!) @cached {\n    schedule(where: { year: { _eq: $year } }) {\n      event_name\n      event_date\n      round_number\n      location\n      country\n      ...Event_ScheduleFragment\n    }\n    circuits(where: { year: { _eq: $year } }) {\n      location\n      country\n      ...CircuitDetails\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment MapScheduleLocation on schedule {\n    round_number\n    event_name\n    event_date\n    location\n    longitude\n    latitude\n  }\n',
): (typeof documents)['\n  fragment MapScheduleLocation on schedule {\n    round_number\n    event_name\n    event_date\n    location\n    longitude\n    latitude\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment ScheduleSessions on schedule {\n    year\n    event_name\n    session1\n    session2\n    session3\n    session4\n    session5\n    session1_date_utc\n    session2_date_utc\n    session3_date_utc\n    session4_date_utc\n    session5_date_utc\n  }\n',
): (typeof documents)['\n  fragment ScheduleSessions on schedule {\n    year\n    event_name\n    session1\n    session2\n    session3\n    session4\n    session5\n    session1_date_utc\n    session2_date_utc\n    session3_date_utc\n    session4_date_utc\n    session5_date_utc\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment MapScheduleFragment on schedule {\n    event_name\n    round_number\n    event_date\n    year\n  }\n',
): (typeof documents)['\n  fragment MapScheduleFragment on schedule {\n    event_name\n    round_number\n    event_date\n    year\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment TopThreeRaceResults on events {\n    topThreeRace: sessions(\n      where: { event: { year: { _eq: $year } }, name: { _eq: Race } }\n    ) {\n      driver_sessions(\n        limit: 3\n        order_by: { results_aggregate: { max: { finishing_position: asc } } }\n      ) {\n        results {\n          finishing_position\n        }\n        driver {\n          full_name\n        }\n        constructorByConstructorId {\n          name\n          color\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  fragment TopThreeRaceResults on events {\n    topThreeRace: sessions(\n      where: { event: { year: { _eq: $year } }, name: { _eq: Race } }\n    ) {\n      driver_sessions(\n        limit: 3\n        order_by: { results_aggregate: { max: { finishing_position: asc } } }\n      ) {\n        results {\n          finishing_position\n        }\n        driver {\n          full_name\n        }\n        constructorByConstructorId {\n          name\n          color\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetMapSchedule($year: Int!) @cached {\n    schedule(where: { year: { _eq: $year } }, order_by: { round_number: asc }) {\n      event_name\n      ...MapScheduleFragment\n      ...MapScheduleLocation\n      ...ScheduleEventDetails\n      ...ScheduleSessions\n    }\n    events(where: { year: { _eq: $year } }) {\n      name\n      ...RaceResults\n      ...TopThreeRaceResults\n    }\n  }\n',
): (typeof documents)['\n  query GetMapSchedule($year: Int!) @cached {\n    schedule(where: { year: { _eq: $year } }, order_by: { round_number: asc }) {\n      event_name\n      ...MapScheduleFragment\n      ...MapScheduleLocation\n      ...ScheduleEventDetails\n      ...ScheduleSessions\n    }\n    events(where: { year: { _eq: $year } }) {\n      name\n      ...RaceResults\n      ...TopThreeRaceResults\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment CircuitDetails on circuits {\n    circuit_details\n  }\n',
): (typeof documents)['\n  fragment CircuitDetails on circuits {\n    circuit_details\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment ScheduleEventDetails on schedule {\n    year\n    event_name\n    event_date\n    round_number\n    location\n    country\n    event_format\n  }\n',
): (typeof documents)['\n  fragment ScheduleEventDetails on schedule {\n    year\n    event_name\n    event_date\n    round_number\n    location\n    country\n    event_format\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n      query GetSeasonEventNames($year: Int!, $event: String!) @cached {\n        schedule(\n          where: {\n            year: { _eq: $year }\n            _or: [\n              { event_name: { _regex: $event } }\n              { country: { _regex: $event } }\n              { location: { _regex: $event } }\n            ]\n          }\n        ) {\n          event_name\n        }\n      }\n    ',
): (typeof documents)['\n      query GetSeasonEventNames($year: Int!, $event: String!) @cached {\n        schedule(\n          where: {\n            year: { _eq: $year }\n            _or: [\n              { event_name: { _regex: $event } }\n              { country: { _regex: $event } }\n              { location: { _regex: $event } }\n            ]\n          }\n        ) {\n          event_name\n        }\n      }\n    '];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetNavEvents($year: Int!) @cached {\n    schedule(order_by: { round_number: asc }, where: { year: { _eq: $year } }) {\n      round_number\n      event_name\n      event_format\n    }\n  }\n',
): (typeof documents)['\n  query GetNavEvents($year: Int!) @cached {\n    schedule(order_by: { round_number: asc }, where: { year: { _eq: $year } }) {\n      round_number\n      event_name\n      event_format\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetNavSessions($year: Int!, $event: String!) @cached {\n    schedule(\n      distinct_on: event_name\n      where: { year: { _eq: $year }, event_name: { _eq: $event } }\n      limit: 1\n    ) {\n      session1\n      session2\n      session3\n      session4\n      session5\n    }\n  }\n',
): (typeof documents)['\n  query GetNavSessions($year: Int!, $event: String!) @cached {\n    schedule(\n      distinct_on: event_name\n      where: { year: { _eq: $year }, event_name: { _eq: $event } }\n      limit: 1\n    ) {\n      session1\n      session2\n      session3\n      session4\n      session5\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetNextEvent($today: String!) {\n    schedule(\n      where: { event_date: { _gte: $today } }\n      order_by: { event_date: asc }\n      limit: 1\n    ) {\n      year\n      event_name\n      round_number\n      location\n      country\n      event_format\n      session1_date_utc\n      session2_date_utc\n      session3_date_utc\n      session4_date_utc\n      session5_date_utc\n    }\n  }\n',
): (typeof documents)['\n  query GetNextEvent($today: String!) {\n    schedule(\n      where: { event_date: { _gte: $today } }\n      order_by: { event_date: asc }\n      limit: 1\n    ) {\n      year\n      event_name\n      round_number\n      location\n      country\n      event_format\n      session1_date_utc\n      session2_date_utc\n      session3_date_utc\n      session4_date_utc\n      session5_date_utc\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetNextEventCircuit(\n    $location: String!\n    $country: String!\n    $year: Int!\n  ) {\n    circuits(\n      where: {\n        _and: {\n          location: { _eq: $location }\n          country: { _eq: $country }\n          year: { _eq: $year }\n        }\n      }\n      limit: 1\n    ) {\n      ...CircuitDetails\n    }\n  }\n',
): (typeof documents)['\n  query GetNextEventCircuit(\n    $location: String!\n    $country: String!\n    $year: Int!\n  ) {\n    circuits(\n      where: {\n        _and: {\n          location: { _eq: $location }\n          country: { _eq: $country }\n          year: { _eq: $year }\n        }\n      }\n      limit: 1\n    ) {\n      ...CircuitDetails\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  fragment RaceResults on events {\n    name\n    raceSession: sessions(\n      where: { event: { year: { _eq: $year } }, name: { _eq: Race } }\n    ) {\n      driver_sessions(\n        limit: 30\n        order_by: { results_aggregate: { max: { finishing_position: asc } } }\n      ) {\n        results {\n          finishing_position\n        }\n        driver {\n          full_name\n        }\n        constructorByConstructorId {\n          name\n          color\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  fragment RaceResults on events {\n    name\n    raceSession: sessions(\n      where: { event: { year: { _eq: $year } }, name: { _eq: Race } }\n    ) {\n      driver_sessions(\n        limit: 30\n        order_by: { results_aggregate: { max: { finishing_position: asc } } }\n      ) {\n        results {\n          finishing_position\n        }\n        driver {\n          full_name\n        }\n        constructorByConstructorId {\n          name\n          color\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetConstructor($_id: String!) @cached {\n    constructors(where: { ergast_id: { _eq: $_id } }) {\n      name\n      color\n      year\n      driver_sessions(\n        order_by: { session: { event: { year: asc } } }\n        where: { session: { total_laps: { _is_null: false } } }\n      ) {\n        driver {\n          full_name\n          number\n          headshot_url\n          country_code\n        }\n        session {\n          name\n          event {\n            round_number\n            name\n            year\n          }\n        }\n        results {\n          points\n          classified_position\n          grid_position\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query GetConstructor($_id: String!) @cached {\n    constructors(where: { ergast_id: { _eq: $_id } }) {\n      name\n      color\n      year\n      driver_sessions(\n        order_by: { session: { event: { year: asc } } }\n        where: { session: { total_laps: { _is_null: false } } }\n      ) {\n        driver {\n          full_name\n          number\n          headshot_url\n          country_code\n        }\n        session {\n          name\n          event {\n            round_number\n            name\n            year\n          }\n        }\n        results {\n          points\n          classified_position\n          grid_position\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetEventSchedule($year: Int!, $event: String!) @cached {\n    dropdown_events: schedule(\n      where: { event_name: { _neq: $event }, year: { _eq: $year } }\n    ) {\n      event_name\n      round_number\n      location\n    }\n    schedule(\n      where: { year: { _eq: $year }, event_name: { _eq: $event } }\n      limit: 1\n    ) {\n      year\n      round_number\n      event_date\n      official_event_name\n      event_name\n      event_format\n      location\n      country\n      session1\n      session1_date_utc\n      session2\n      session2_date_utc\n      session3\n      session3_date_utc\n      session4\n      session4_date_utc\n      session5\n      session5_date_utc\n    }\n  }\n',
): (typeof documents)['\n  query GetEventSchedule($year: Int!, $event: String!) @cached {\n    dropdown_events: schedule(\n      where: { event_name: { _neq: $event }, year: { _eq: $year } }\n    ) {\n      event_name\n      round_number\n      location\n    }\n    schedule(\n      where: { year: { _eq: $year }, event_name: { _eq: $event } }\n      limit: 1\n    ) {\n      year\n      round_number\n      event_date\n      official_event_name\n      event_name\n      event_format\n      location\n      country\n      session1\n      session1_date_utc\n      session2\n      session2_date_utc\n      session3\n      session3_date_utc\n      session4\n      session4_date_utc\n      session5\n      session5_date_utc\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetEventDetails($year: Int!, $event: String!) @cached {\n    events(where: { name: { _eq: $event }, year: { _eq: $year } }, limit: 1) {\n      competition: sessions(\n        where: { name: { _in: [Sprint, Race] } }\n        limit: 2\n      ) {\n        scheduled_start_time_utc\n        name\n        driver_sessions {\n          driver {\n            abbreviation\n            full_name\n            number\n            headshot_url\n          }\n          constructorByConstructorId {\n            color\n          }\n          results {\n            finishing_position\n            classified_position\n            grid_position\n            total_race_time\n          }\n          fastest_lap: laps(limit: 1, order_by: { lap_time: asc }) {\n            lap_time\n            lap_number\n          }\n        }\n      }\n      qualifying: sessions(\n        where: {\n          name: { _in: [Sprint_Shootout, Sprint_Qualifying, Qualifying] }\n        }\n        limit: 2\n      ) {\n        scheduled_start_time_utc\n        name\n        driver_sessions {\n          driver {\n            abbreviation\n            full_name\n            number\n            headshot_url\n          }\n          constructorByConstructorId {\n            color\n          }\n          results {\n            finishing_position\n            q1_time\n            q2_time\n            q3_time\n          }\n        }\n      }\n      practices: sessions(\n        limit: 3\n        where: { name: { _in: [Practice_1, Practice_2, Practice_3] } }\n      ) {\n        scheduled_start_time_utc\n        name\n        driver_sessions {\n          driver {\n            abbreviation\n            full_name\n            number\n            headshot_url\n          }\n          constructorByConstructorId {\n            color\n          }\n          fastest_lap: laps(limit: 1, order_by: { lap_time: asc }) {\n            lap_time\n            lap_number\n          }\n        }\n      }\n    }\n\n    schedule(\n      where: { _and: { event_name: { _eq: $event }, year: { _eq: $year } } }\n      order_by: { round_number: asc }\n    ) {\n      ...EventSessionCards\n      ...ScheduleEventDetails\n    }\n\n    fia_documents(\n      where: { _and: { event_name: { _eq: $event }, year: { _eq: $year } } }\n      order_by: { publish_time: desc }\n    ) {\n      ...FIADocs\n    }\n  }\n',
): (typeof documents)['\n  query GetEventDetails($year: Int!, $event: String!) @cached {\n    events(where: { name: { _eq: $event }, year: { _eq: $year } }, limit: 1) {\n      competition: sessions(\n        where: { name: { _in: [Sprint, Race] } }\n        limit: 2\n      ) {\n        scheduled_start_time_utc\n        name\n        driver_sessions {\n          driver {\n            abbreviation\n            full_name\n            number\n            headshot_url\n          }\n          constructorByConstructorId {\n            color\n          }\n          results {\n            finishing_position\n            classified_position\n            grid_position\n            total_race_time\n          }\n          fastest_lap: laps(limit: 1, order_by: { lap_time: asc }) {\n            lap_time\n            lap_number\n          }\n        }\n      }\n      qualifying: sessions(\n        where: {\n          name: { _in: [Sprint_Shootout, Sprint_Qualifying, Qualifying] }\n        }\n        limit: 2\n      ) {\n        scheduled_start_time_utc\n        name\n        driver_sessions {\n          driver {\n            abbreviation\n            full_name\n            number\n            headshot_url\n          }\n          constructorByConstructorId {\n            color\n          }\n          results {\n            finishing_position\n            q1_time\n            q2_time\n            q3_time\n          }\n        }\n      }\n      practices: sessions(\n        limit: 3\n        where: { name: { _in: [Practice_1, Practice_2, Practice_3] } }\n      ) {\n        scheduled_start_time_utc\n        name\n        driver_sessions {\n          driver {\n            abbreviation\n            full_name\n            number\n            headshot_url\n          }\n          constructorByConstructorId {\n            color\n          }\n          fastest_lap: laps(limit: 1, order_by: { lap_time: asc }) {\n            lap_time\n            lap_number\n          }\n        }\n      }\n    }\n\n    schedule(\n      where: { _and: { event_name: { _eq: $event }, year: { _eq: $year } } }\n      order_by: { round_number: asc }\n    ) {\n      ...EventSessionCards\n      ...ScheduleEventDetails\n    }\n\n    fia_documents(\n      where: { _and: { event_name: { _eq: $event }, year: { _eq: $year } } }\n      order_by: { publish_time: desc }\n    ) {\n      ...FIADocs\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetTopStandings($season: Int!, $limit: Int = 3) @cached {\n    drivers(\n      where: { driver_standings: { season: { _eq: $season } } }\n      order_by: { driver_standings_aggregate: { max: { points: desc } } }\n      limit: $limit\n    ) {\n      abbreviation\n      full_name\n      latest_constructor: driver_sessions(\n        limit: 1\n        order_by: { session: { date: desc } }\n      ) {\n        constructor: constructorByConstructorId {\n          name\n          color\n        }\n      }\n      driver_standings(\n        where: { season: { _eq: $season } }\n        order_by: { round: desc }\n        limit: 1\n      ) {\n        round\n        points\n        position\n      }\n    }\n    constructors(\n      where: { constructor_standings: { season: { _eq: $season } } }\n      order_by: { constructor_standings_aggregate: { max: { points: desc } } }\n      limit: $limit\n    ) {\n      name\n      color\n      constructor_standings(\n        where: { season: { _eq: $season } }\n        order_by: { round: desc }\n        limit: 1\n      ) {\n        round\n        points\n        position\n      }\n    }\n  }\n',
): (typeof documents)['\n  query GetTopStandings($season: Int!, $limit: Int = 3) @cached {\n    drivers(\n      where: { driver_standings: { season: { _eq: $season } } }\n      order_by: { driver_standings_aggregate: { max: { points: desc } } }\n      limit: $limit\n    ) {\n      abbreviation\n      full_name\n      latest_constructor: driver_sessions(\n        limit: 1\n        order_by: { session: { date: desc } }\n      ) {\n        constructor: constructorByConstructorId {\n          name\n          color\n        }\n      }\n      driver_standings(\n        where: { season: { _eq: $season } }\n        order_by: { round: desc }\n        limit: 1\n      ) {\n        round\n        points\n        position\n      }\n    }\n    constructors(\n      where: { constructor_standings: { season: { _eq: $season } } }\n      order_by: { constructor_standings_aggregate: { max: { points: desc } } }\n      limit: $limit\n    ) {\n      name\n      color\n      constructor_standings(\n        where: { season: { _eq: $season } }\n        order_by: { round: desc }\n        limit: 1\n      ) {\n        round\n        points\n        position\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetStandings($season: Int!) @cached {\n    events(where: { year: { _eq: $season } }) {\n      round_number\n      name\n    }\n    drivers(\n      where: { driver_standings: { season: { _eq: $season } } }\n      order_by: { driver_standings_aggregate: { max: { points: desc } } }\n    ) {\n      abbreviation\n      full_name\n      latest_constructor: driver_sessions(\n        limit: 1\n        order_by: { session: { date: desc } }\n      ) {\n        constructor: constructorByConstructorId {\n          name\n          color\n        }\n      }\n      driver_standings(\n        where: { season: { _eq: $season } }\n        order_by: { round: asc }\n      ) {\n        round\n        points\n        position\n      }\n    }\n    constructors(\n      where: { constructor_standings: { season: { _eq: $season } } }\n      order_by: { constructor_standings_aggregate: { max: { points: desc } } }\n    ) {\n      name\n      color\n      lastRoundPoints: constructor_standings(\n        where: { season: { _eq: $season } }\n        order_by: { round: desc }\n        limit: 1\n      ) {\n        points\n      }\n      constructor_standings(\n        where: { season: { _eq: $season } }\n        order_by: { round: desc }\n      ) {\n        round\n        points\n        position\n      }\n    }\n  }\n',
): (typeof documents)['\n  query GetStandings($season: Int!) @cached {\n    events(where: { year: { _eq: $season } }) {\n      round_number\n      name\n    }\n    drivers(\n      where: { driver_standings: { season: { _eq: $season } } }\n      order_by: { driver_standings_aggregate: { max: { points: desc } } }\n    ) {\n      abbreviation\n      full_name\n      latest_constructor: driver_sessions(\n        limit: 1\n        order_by: { session: { date: desc } }\n      ) {\n        constructor: constructorByConstructorId {\n          name\n          color\n        }\n      }\n      driver_standings(\n        where: { season: { _eq: $season } }\n        order_by: { round: asc }\n      ) {\n        round\n        points\n        position\n      }\n    }\n    constructors(\n      where: { constructor_standings: { season: { _eq: $season } } }\n      order_by: { constructor_standings_aggregate: { max: { points: desc } } }\n    ) {\n      name\n      color\n      lastRoundPoints: constructor_standings(\n        where: { season: { _eq: $season } }\n        order_by: { round: desc }\n        limit: 1\n      ) {\n        points\n      }\n      constructor_standings(\n        where: { season: { _eq: $season } }\n        order_by: { round: desc }\n      ) {\n        round\n        points\n        position\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query Session(\n    $year: Int!\n    $event: String!\n    $session: session_name_choices_enum!\n  ) @cached {\n    sessions(\n      limit: 1\n      where: {\n        event: { year: { _eq: $year }, name: { _eq: $event } }\n        name: { _eq: $session }\n      }\n    ) {\n      name\n      total_laps\n      scheduled_start_time_utc\n      event {\n        name\n      }\n    }\n  }\n',
): (typeof documents)['\n  query Session(\n    $year: Int!\n    $event: String!\n    $session: session_name_choices_enum!\n  ) @cached {\n    sessions(\n      limit: 1\n      where: {\n        event: { year: { _eq: $year }, name: { _eq: $event } }\n        name: { _eq: $session }\n      }\n    ) {\n      name\n      total_laps\n      scheduled_start_time_utc\n      event {\n        name\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query SessionResults(\n    $year: Int!\n    $event: String!\n    $session: session_name_choices_enum!\n  ) @cached {\n    sessions(\n      limit: 1\n      where: {\n        event: { year: { _eq: $year }, name: { _eq: $event } }\n        name: { _eq: $session }\n      }\n    ) {\n      name\n      event {\n        name\n      }\n      driver_sessions {\n        constructorByConstructorId {\n          name\n          color\n        }\n        driver {\n          abbreviation\n          full_name\n          number\n          headshot_url\n        }\n        results(\n          where: {\n            _or: [\n              { grid_position: { _is_null: false } }\n              { finishing_position: { _is_null: false } }\n            ]\n          }\n        ) {\n          grid_position\n          finishing_position\n          points\n          status\n          classified_position\n          total_race_time\n        }\n        fastest_lap: laps(order_by: { lap_time: asc }, limit: 1) {\n          lap_number\n          stint\n          lap_time\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query SessionResults(\n    $year: Int!\n    $event: String!\n    $session: session_name_choices_enum!\n  ) @cached {\n    sessions(\n      limit: 1\n      where: {\n        event: { year: { _eq: $year }, name: { _eq: $event } }\n        name: { _eq: $session }\n      }\n    ) {\n      name\n      event {\n        name\n      }\n      driver_sessions {\n        constructorByConstructorId {\n          name\n          color\n        }\n        driver {\n          abbreviation\n          full_name\n          number\n          headshot_url\n        }\n        results(\n          where: {\n            _or: [\n              { grid_position: { _is_null: false } }\n              { finishing_position: { _is_null: false } }\n            ]\n          }\n        ) {\n          grid_position\n          finishing_position\n          points\n          status\n          classified_position\n          total_race_time\n        }\n        fastest_lap: laps(order_by: { lap_time: asc }, limit: 1) {\n          lap_number\n          stint\n          lap_time\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetSessionFastestTimes(\n    $year: Int!\n    $event: String!\n    $session: session_name_choices_enum!\n  ) @cached {\n    sessions(\n      limit: 1\n      where: {\n        event: { year: { _eq: $year }, name: { _eq: $event } }\n        name: { _eq: $session }\n      }\n    ) {\n      name\n      event {\n        name\n      }\n      driver_sessions {\n        constructorByConstructorId {\n          name\n          color\n        }\n        driver {\n          abbreviation\n        }\n        fastest_lap: laps(order_by: { lap_time: asc }, limit: 1) {\n          lap_number\n          stint\n          lap_time\n          sector1\n          sector2\n          sector3\n        }\n        fastest_sector1: laps(order_by: { sector1: asc }, limit: 1) {\n          lap_number\n          stint\n          sector1\n        }\n        fastest_sector2: laps(order_by: { sector2: asc }, limit: 1) {\n          lap_number\n          stint\n          sector2\n        }\n        fastest_sector3: laps(order_by: { sector3: asc }, limit: 1) {\n          lap_number\n          stint\n          sector3\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query GetSessionFastestTimes(\n    $year: Int!\n    $event: String!\n    $session: session_name_choices_enum!\n  ) @cached {\n    sessions(\n      limit: 1\n      where: {\n        event: { year: { _eq: $year }, name: { _eq: $event } }\n        name: { _eq: $session }\n      }\n    ) {\n      name\n      event {\n        name\n      }\n      driver_sessions {\n        constructorByConstructorId {\n          name\n          color\n        }\n        driver {\n          abbreviation\n        }\n        fastest_lap: laps(order_by: { lap_time: asc }, limit: 1) {\n          lap_number\n          stint\n          lap_time\n          sector1\n          sector2\n          sector3\n        }\n        fastest_sector1: laps(order_by: { sector1: asc }, limit: 1) {\n          lap_number\n          stint\n          sector1\n        }\n        fastest_sector2: laps(order_by: { sector2: asc }, limit: 1) {\n          lap_number\n          stint\n          sector2\n        }\n        fastest_sector3: laps(order_by: { sector3: asc }, limit: 1) {\n          lap_number\n          stint\n          sector3\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetSessionStints(\n    $year: Int!\n    $event: String!\n    $session: session_name_choices_enum!\n  ) @cached {\n    sessions(\n      limit: 1\n      where: {\n        event: { year: { _eq: $year }, name: { _eq: $event } }\n        name: { _eq: $session }\n      }\n    ) {\n      driver_sessions {\n        driver {\n          abbreviation\n          full_name\n        }\n        laps {\n          stint\n          tyre_compound {\n            value\n          }\n          tyre_life\n          fresh_tyre\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query GetSessionStints(\n    $year: Int!\n    $event: String!\n    $session: session_name_choices_enum!\n  ) @cached {\n    sessions(\n      limit: 1\n      where: {\n        event: { year: { _eq: $year }, name: { _eq: $event } }\n        name: { _eq: $session }\n      }\n    ) {\n      driver_sessions {\n        driver {\n          abbreviation\n          full_name\n        }\n        laps {\n          stint\n          tyre_compound {\n            value\n          }\n          tyre_life\n          fresh_tyre\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetSessionLapTimes(\n    $year: Int!\n    $event: String!\n    $session: session_name_choices_enum!\n  ) @cached {\n    sessions(\n      limit: 1\n      where: {\n        event: { year: { _eq: $year }, name: { _eq: $event } }\n        name: { _eq: $session }\n      }\n    ) {\n      driver_sessions {\n        constructorByConstructorId {\n          name\n          color\n        }\n        driver {\n          abbreviation\n          full_name\n          number\n        }\n        laps(order_by: { lap_number: asc }) {\n          lap_number\n          lap_time\n          compound\n          session_time\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query GetSessionLapTimes(\n    $year: Int!\n    $event: String!\n    $session: session_name_choices_enum!\n  ) @cached {\n    sessions(\n      limit: 1\n      where: {\n        event: { year: { _eq: $year }, name: { _eq: $event } }\n        name: { _eq: $session }\n      }\n    ) {\n      driver_sessions {\n        constructorByConstructorId {\n          name\n          color\n        }\n        driver {\n          abbreviation\n          full_name\n          number\n        }\n        laps(order_by: { lap_number: asc }) {\n          lap_number\n          lap_time\n          compound\n          session_time\n        }\n      }\n    }\n  }\n'];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
